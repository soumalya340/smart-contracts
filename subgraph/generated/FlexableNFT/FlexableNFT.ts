// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoyaltyUpdated extends ethereum.Event {
  get params(): RoyaltyUpdated__Params {
    return new RoyaltyUpdated__Params(this);
  }
}

export class RoyaltyUpdated__Params {
  _event: RoyaltyUpdated;

  constructor(event: RoyaltyUpdated) {
    this._event = event;
  }

  get reciever(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get percentageBasisPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TicketBurnt extends ethereum.Event {
  get params(): TicketBurnt__Params {
    return new TicketBurnt__Params(this);
  }
}

export class TicketBurnt__Params {
  _event: TicketBurnt;

  constructor(event: TicketBurnt) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ownerOrApproved(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TicketCreated extends ethereum.Event {
  get params(): TicketCreated__Params {
    return new TicketCreated__Params(this);
  }
}

export class TicketCreated__Params {
  _event: TicketCreated;

  constructor(event: TicketCreated) {
    this._event = event;
  }

  get tokenID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get metaDataURI(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class TicketRedeemed extends ethereum.Event {
  get params(): TicketRedeemed__Params {
    return new TicketRedeemed__Params(this);
  }
}

export class TicketRedeemed__Params {
  _event: TicketRedeemed;

  constructor(event: TicketRedeemed) {
    this._event = event;
  }

  get tokenID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get count(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get info(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FlexableNFT__TicketStatusResult {
  value0: i32;
  value1: string;

  constructor(value0: i32, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }

  getRedeemCount(): i32 {
    return this.value0;
  }

  getRedeemInfo(): string {
    return this.value1;
  }
}

export class FlexableNFT__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class FlexableNFT extends ethereum.SmartContract {
  static bind(address: Address): FlexableNFT {
    return new FlexableNFT("FlexableNFT", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FLEXABLENFT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "FLEXABLENFT_ADMIN_ROLE",
      "FLEXABLENFT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_FLEXABLENFT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "FLEXABLENFT_ADMIN_ROLE",
      "FLEXABLENFT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FLEXABLENFT_CREATOR_ROLE(): Bytes {
    let result = super.call(
      "FLEXABLENFT_CREATOR_ROLE",
      "FLEXABLENFT_CREATOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_FLEXABLENFT_CREATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "FLEXABLENFT_CREATOR_ROLE",
      "FLEXABLENFT_CREATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FLEXABLENFT_OPERATOR_ROLE(): Bytes {
    let result = super.call(
      "FLEXABLENFT_OPERATOR_ROLE",
      "FLEXABLENFT_OPERATOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_FLEXABLENFT_OPERATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "FLEXABLENFT_OPERATOR_ROLE",
      "FLEXABLENFT_OPERATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  TicketStatus(param0: BigInt): FlexableNFT__TicketStatusResult {
    let result = super.call(
      "TicketStatus",
      "TicketStatus(uint256):(uint16,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new FlexableNFT__TicketStatusResult(
      result[0].toI32(),
      result[1].toString()
    );
  }

  try_TicketStatus(
    param0: BigInt
  ): ethereum.CallResult<FlexableNFT__TicketStatusResult> {
    let result = super.tryCall(
      "TicketStatus",
      "TicketStatus(uint256):(uint16,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FlexableNFT__TicketStatusResult(value[0].toI32(), value[1].toString())
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createTicket(metadataURI: string): BigInt {
    let result = super.call("createTicket", "createTicket(string):(uint256)", [
      ethereum.Value.fromString(metadataURI)
    ]);

    return result[0].toBigInt();
  }

  try_createTicket(metadataURI: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createTicket",
      "createTicket(string):(uint256)",
      [ethereum.Value.fromString(metadataURI)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createTicketWithCustomRoyalty(
    metadataURI: string,
    royaltyPercentBasisPoint: BigInt
  ): BigInt {
    let result = super.call(
      "createTicketWithCustomRoyalty",
      "createTicketWithCustomRoyalty(string,uint96):(uint256)",
      [
        ethereum.Value.fromString(metadataURI),
        ethereum.Value.fromUnsignedBigInt(royaltyPercentBasisPoint)
      ]
    );

    return result[0].toBigInt();
  }

  try_createTicketWithCustomRoyalty(
    metadataURI: string,
    royaltyPercentBasisPoint: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createTicketWithCustomRoyalty",
      "createTicketWithCustomRoyalty(string,uint96):(uint256)",
      [
        ethereum.Value.fromString(metadataURI),
        ethereum.Value.fromUnsignedBigInt(royaltyPercentBasisPoint)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegateTicketCreation(creator: Address, metadataURI: string): BigInt {
    let result = super.call(
      "delegateTicketCreation",
      "delegateTicketCreation(address,string):(uint256)",
      [
        ethereum.Value.fromAddress(creator),
        ethereum.Value.fromString(metadataURI)
      ]
    );

    return result[0].toBigInt();
  }

  try_delegateTicketCreation(
    creator: Address,
    metadataURI: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegateTicketCreation",
      "delegateTicketCreation(address,string):(uint256)",
      [
        ethereum.Value.fromAddress(creator),
        ethereum.Value.fromString(metadataURI)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegateTicketCreationWithCustomRoyalty(
    creator: Address,
    metadataURI: string,
    royaltyaddress: Address,
    royaltyPercentBasisPoint: BigInt
  ): BigInt {
    let result = super.call(
      "delegateTicketCreationWithCustomRoyalty",
      "delegateTicketCreationWithCustomRoyalty(address,string,address,uint96):(uint256)",
      [
        ethereum.Value.fromAddress(creator),
        ethereum.Value.fromString(metadataURI),
        ethereum.Value.fromAddress(royaltyaddress),
        ethereum.Value.fromUnsignedBigInt(royaltyPercentBasisPoint)
      ]
    );

    return result[0].toBigInt();
  }

  try_delegateTicketCreationWithCustomRoyalty(
    creator: Address,
    metadataURI: string,
    royaltyaddress: Address,
    royaltyPercentBasisPoint: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegateTicketCreationWithCustomRoyalty",
      "delegateTicketCreationWithCustomRoyalty(address,string,address,uint96):(uint256)",
      [
        ethereum.Value.fromAddress(creator),
        ethereum.Value.fromString(metadataURI),
        ethereum.Value.fromAddress(royaltyaddress),
        ethereum.Value.fromUnsignedBigInt(royaltyPercentBasisPoint)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  royaltyInfo(
    _tokenId: BigInt,
    _salePrice: BigInt
  ): FlexableNFT__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );

    return new FlexableNFT__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    _tokenId: BigInt,
    _salePrice: BigInt
  ): ethereum.CallResult<FlexableNFT__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FlexableNFT__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnTicketCall extends ethereum.Call {
  get inputs(): BurnTicketCall__Inputs {
    return new BurnTicketCall__Inputs(this);
  }

  get outputs(): BurnTicketCall__Outputs {
    return new BurnTicketCall__Outputs(this);
  }
}

export class BurnTicketCall__Inputs {
  _call: BurnTicketCall;

  constructor(call: BurnTicketCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnTicketCall__Outputs {
  _call: BurnTicketCall;

  constructor(call: BurnTicketCall) {
    this._call = call;
  }
}

export class CreateTicketCall extends ethereum.Call {
  get inputs(): CreateTicketCall__Inputs {
    return new CreateTicketCall__Inputs(this);
  }

  get outputs(): CreateTicketCall__Outputs {
    return new CreateTicketCall__Outputs(this);
  }
}

export class CreateTicketCall__Inputs {
  _call: CreateTicketCall;

  constructor(call: CreateTicketCall) {
    this._call = call;
  }

  get metadataURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreateTicketCall__Outputs {
  _call: CreateTicketCall;

  constructor(call: CreateTicketCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateTicketWithCustomRoyaltyCall extends ethereum.Call {
  get inputs(): CreateTicketWithCustomRoyaltyCall__Inputs {
    return new CreateTicketWithCustomRoyaltyCall__Inputs(this);
  }

  get outputs(): CreateTicketWithCustomRoyaltyCall__Outputs {
    return new CreateTicketWithCustomRoyaltyCall__Outputs(this);
  }
}

export class CreateTicketWithCustomRoyaltyCall__Inputs {
  _call: CreateTicketWithCustomRoyaltyCall;

  constructor(call: CreateTicketWithCustomRoyaltyCall) {
    this._call = call;
  }

  get metadataURI(): string {
    return this._call.inputValues[0].value.toString();
  }

  get royaltyPercentBasisPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateTicketWithCustomRoyaltyCall__Outputs {
  _call: CreateTicketWithCustomRoyaltyCall;

  constructor(call: CreateTicketWithCustomRoyaltyCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DelegateTicketCreationCall extends ethereum.Call {
  get inputs(): DelegateTicketCreationCall__Inputs {
    return new DelegateTicketCreationCall__Inputs(this);
  }

  get outputs(): DelegateTicketCreationCall__Outputs {
    return new DelegateTicketCreationCall__Outputs(this);
  }
}

export class DelegateTicketCreationCall__Inputs {
  _call: DelegateTicketCreationCall;

  constructor(call: DelegateTicketCreationCall) {
    this._call = call;
  }

  get creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get metadataURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class DelegateTicketCreationCall__Outputs {
  _call: DelegateTicketCreationCall;

  constructor(call: DelegateTicketCreationCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DelegateTicketCreationWithCustomRoyaltyCall extends ethereum.Call {
  get inputs(): DelegateTicketCreationWithCustomRoyaltyCall__Inputs {
    return new DelegateTicketCreationWithCustomRoyaltyCall__Inputs(this);
  }

  get outputs(): DelegateTicketCreationWithCustomRoyaltyCall__Outputs {
    return new DelegateTicketCreationWithCustomRoyaltyCall__Outputs(this);
  }
}

export class DelegateTicketCreationWithCustomRoyaltyCall__Inputs {
  _call: DelegateTicketCreationWithCustomRoyaltyCall;

  constructor(call: DelegateTicketCreationWithCustomRoyaltyCall) {
    this._call = call;
  }

  get creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get metadataURI(): string {
    return this._call.inputValues[1].value.toString();
  }

  get royaltyaddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get royaltyPercentBasisPoint(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DelegateTicketCreationWithCustomRoyaltyCall__Outputs {
  _call: DelegateTicketCreationWithCustomRoyaltyCall;

  constructor(call: DelegateTicketCreationWithCustomRoyaltyCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RedeemTicketCall extends ethereum.Call {
  get inputs(): RedeemTicketCall__Inputs {
    return new RedeemTicketCall__Inputs(this);
  }

  get outputs(): RedeemTicketCall__Outputs {
    return new RedeemTicketCall__Outputs(this);
  }
}

export class RedeemTicketCall__Inputs {
  _call: RedeemTicketCall;

  constructor(call: RedeemTicketCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get info(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RedeemTicketCall__Outputs {
  _call: RedeemTicketCall;

  constructor(call: RedeemTicketCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateDefaultRoyaltyCall extends ethereum.Call {
  get inputs(): UpdateDefaultRoyaltyCall__Inputs {
    return new UpdateDefaultRoyaltyCall__Inputs(this);
  }

  get outputs(): UpdateDefaultRoyaltyCall__Outputs {
    return new UpdateDefaultRoyaltyCall__Outputs(this);
  }
}

export class UpdateDefaultRoyaltyCall__Inputs {
  _call: UpdateDefaultRoyaltyCall;

  constructor(call: UpdateDefaultRoyaltyCall) {
    this._call = call;
  }

  get royaltyReciever(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get percentageBasisPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateDefaultRoyaltyCall__Outputs {
  _call: UpdateDefaultRoyaltyCall;

  constructor(call: UpdateDefaultRoyaltyCall) {
    this._call = call;
  }
}
